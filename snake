import pygame as pg 
import argparse

#Démarrage de la partie
pg.init()

clock = pg.time.Clock()

parser = argparse.ArgumentParser(description='Arguements du jeu snake')
parser.add_argument('--bg-color-1', help="La première couleur du quadrillage",default=(255,255,255))
parser.add_argument('--bg-color-2', help="La deuxième couleur du quadrillage",default=(0,0,0))
parser.add_argument('--width', type=int, help="Longueur du quadrillage",default=400)
parser.add_argument('--height', type=int, help="Hauteur du quadrillage",default=300)
parser.add_argument('--fps', type=int, help="Nombre de frames par seconde",default=5)
parser.add_argument('--fruit-color', help="La couleur du fruit",default=(255,0,0))
parser.add_argument('--snake-color', help="La couleur du serpent",default=(0,255,0))
parser.add_argument('--snake-length', type=int, help="Taille du snake",default=3)
parser.add_argument('--tile-size', type=int, help="Taille du carreau",default=20)
args = parser.parse_args()
print(args)


#Initialisation des variables à partir des arguments
colors,screenwidth,screenheight,clockfrequency=(args.bg_color_1,args.width,args.height,pg.time.Clock())
fps=args.fps
black =args.bg_color_2
red=args.fruit_color
green=args.snake_color
snakelen=args.snake_length
taillerec=args.tile_size
score=0
pg.display.set_caption("Score: "+str(score))

screen = pg.display.set_mode( (screenwidth, screenheight) )
Flag=True


#Création du quadrillage
screen.fill( colors )

for left in [k for k in range(0,screenwidth,2*taillerec)]: 
    for top in [k for k in range(0,screenheight,2*taillerec)]:
        rect = pg.Rect(left,top,taillerec, taillerec)
        pg.draw.rect(screen, black, rect)
for left in [k for k in range(taillerec,screenwidth,2*taillerec)]:
    for top in [k for k in range(taillerec,screenheight,2*taillerec)]:
        rect = pg.Rect(left,top,taillerec, taillerec)
        pg.draw.rect(screen, black, rect)

#Création du snake et du fruit
snakecor=[] 
for i in range(snakelen):
    snakecor.append((4*taillerec+i*taillerec,10*taillerec))
vectdir=(1,0)

fruit=(3*taillerec,3*taillerec)

while Flag==True:
    clock.tick(fps)


    for event in pg.event.get():

        #Evénements pour faire bouger le serpent
        if event.type == pg.KEYDOWN: 
            if event.key == pg.K_UP:
                vectdir=(0,-1)
        if event.type == pg.KEYDOWN:
            if event.key == pg.K_DOWN:
                vectdir=(0,1)
        if event.type == pg.KEYDOWN:
            if event.key == pg.K_LEFT:
                vectdir=(-1,0)
        if event.type == pg.KEYDOWN:
            if event.key == pg.K_RIGHT:
                vectdir=(1,0)
        
        #Evenements pour quitter
        if event.type == pg.KEYDOWN: 
            if event.key == pg.K_q:
                Flag=False
        if event.type == pg.QUIT:
            Flag=False

    #Mise à jour du serpent
    snakecor.append((snakecor[-1][0]+taillerec*vectdir[0],snakecor[-1][1]+taillerec*vectdir[1]))
    snakecor.pop(0) 

    #Si le serpent touche le fruit
    if snakecor[-1]==fruit:
        score=score+1
        pg.display.set_caption("Score: "+str(score))
        if fruit==(3*taillerec,3*taillerec):
            fruit=(15*taillerec,10*taillerec)
            snakecor=[snakecor[0]]+snakecor
        else:
            fruit=(3*taillerec,3*taillerec)
            snakecor=[snakecor[0]]+snakecor

    #Mise à jour du quadrillage
    screen.fill( colors )
  
    for left in [k for k in range(0,screenwidth,2*taillerec)]: 
        for top in [k for k in range(0,screenheight,2*taillerec)]:
            rect = pg.Rect(left,top,taillerec, taillerec)
            pg.draw.rect(screen, black, rect)
    for left in [k for k in range(taillerec,screenwidth,2*taillerec)]:
        for top in [k for k in range(taillerec,screenheight,2*taillerec)]:
            rect = pg.Rect(left,top,taillerec, taillerec)
            pg.draw.rect(screen, black, rect)

    fruitrec = pg.Rect(fruit[0],fruit[1],taillerec, taillerec)
    pg.draw.rect(screen,red, fruitrec)

        
    for i in range(len(snakecor)):
        draw=pg.Rect(snakecor[i][0],snakecor[i][1],taillerec,taillerec)
        pg.draw.rect(screen,green,draw)
    pg.display.update()

quit()


