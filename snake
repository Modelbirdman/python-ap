import pygame as pg 
import argparse
import sys
import logging 


#Démarrage de la partie
pg.init()

clock = pg.time.Clock()

#Définition des arguments
parser = argparse.ArgumentParser(description='Arguements du jeu snake')
parser.add_argument('--bg-color-1', help="La première couleur du quadrillage",default=(255,255,255))
parser.add_argument('--bg-color-2', help="La deuxième couleur du quadrillage",default=(0,0,0))
parser.add_argument('--width', type=int, help="Longueur du quadrillage",default=400)
parser.add_argument('--height', type=int, help="Hauteur du quadrillage",default=300)
parser.add_argument('--fps', type=int, help="Nombre de frames par seconde",default=5)
parser.add_argument('--fruit-color', help="La couleur du fruit",default=(255,0,0))
parser.add_argument('--snake-color', help="La couleur du serpent",default=(0,255,0))
parser.add_argument('--snake-length', type=int, help="Taille du snake",default=3)
parser.add_argument('--tile-size', type=int, help="Taille du carreau",default=20)

parser.add_argument('--gameover-on-exit', help='A flag.', action='store_true')
parser.add_argument('-g--debug',help='Debug mode', action='store_true')
args = parser.parse_args()

#Test des arguments

if args.snake_length < 2:
    raise ValueError("La taille du snake doit etre strictement superieure à 1")
if args.snake_color==args.fruit_color:
    raise ValueError("Le fruit et le snake doivent avoir des couleurs differentes")
if args.width%args.tile_size!=0:
    raise ValueError("La longueur doit etre un multiple de la taille des carres")
if args.height%args.tile_size!=0:
    raise ValueError("La hauteur doit etre un multiple de la taille des carres")
if args.width/args.tile_size<20:
    raise ValueError("La longueur est minimum de 20 colonnes")
if args.height/args.tile_size<12:
    raise ValueError("La hauteur est minimum de 12 lignes")

#Initialisation des variables à partir des arguments
colors,screenwidth,screenheight,clockfrequency=(args.bg_color_1,args.width,args.height,pg.time.Clock())
fps=args.fps
black =args.bg_color_2
red=args.fruit_color
green=args.snake_color
snakelen=args.snake_length
taillerec=args.tile_size
score=0
testfruit=False #variable définissant les passages de boucle où le serpent a mangé le fruit
pg.display.set_caption("Score: "+str(score))

screen = pg.display.set_mode( (screenwidth, screenheight) )
Flag=True

#Console pour afficher les logs
logger = logging.getLogger(__name__)
handler = logging.StreamHandler(sys.stderr)
logger.addHandler(handler)
logger.setLevel(logging.INFO)
if args.g__debug:
    logger.setLevel(logging.DEBUG)

logger.debug('Start main loop.')


#Création du quadrillage
logger.info('Pour jouer en mode debug, ajouter l argument -g--debug lors du lancement du jeu')
logger.info('New game')
screen.fill( colors )

for left in [k for k in range(0,screenwidth,2*taillerec)]: 
    for top in [k for k in range(0,screenheight,2*taillerec)]:
        rect = pg.Rect(left,top,taillerec, taillerec)
        pg.draw.rect(screen, black, rect)
for left in [k for k in range(taillerec,screenwidth,2*taillerec)]:
    for top in [k for k in range(taillerec,screenheight,2*taillerec)]:
        rect = pg.Rect(left,top,taillerec, taillerec)
        pg.draw.rect(screen, black, rect)

#Création du snake et du fruit
snakecor=[] 
for i in range(snakelen):
    snakecor.append((4*taillerec+i*taillerec,10*taillerec))
vectdir=(1,0)

fruit=(3*taillerec,3*taillerec)

while Flag==True:
    clock.tick(fps)


    for event in pg.event.get():

        #Evénements pour faire bouger le serpent
        if event.type == pg.KEYDOWN: 
            if event.key == pg.K_UP:
                vectdir=(0,-1)
        if event.type == pg.KEYDOWN:
            if event.key == pg.K_DOWN:
                vectdir=(0,1)
        if event.type == pg.KEYDOWN:
            if event.key == pg.K_LEFT:
                vectdir=(-1,0)
        if event.type == pg.KEYDOWN:
            if event.key == pg.K_RIGHT:
                vectdir=(1,0)
        
        #Evenements pour quitter
        if event.type == pg.KEYDOWN: 
            if event.key == pg.K_q:
                Flag=False
                logger.critical('You quit the game')
                logger.debug('Game over')
        if event.type == pg.QUIT:
            Flag=False
            logger.critical('You quit the game')
            logger.debug('Game over')

    #Mise à jour du serpent
    snakecor.append((snakecor[-1][0]+taillerec*vectdir[0],snakecor[-1][1]+taillerec*vectdir[1]))
    snakecor.pop(0) 

    #Si le serpent touche le fruit
    if snakecor[-1]==fruit:
        score=score+1
        testfruit=True
        pg.display.set_caption("Score: "+str(score))
        if fruit==(3*taillerec,3*taillerec):
            fruit=(15*taillerec,10*taillerec)
            snakecor=[snakecor[0]]+snakecor
        else:
            fruit=(3*taillerec,3*taillerec)
            snakecor=[snakecor[0]]+snakecor
        logger.info('Your score is '+str(score))
        logger.debug('Snake has eaten a fruit')

    #Si le snake se touche lui-même
    for i in range(len(snakecor)-1):
        for j in range(i+1,len(snakecor)):
            if snakecor[i]==snakecor[j] and testfruit==False:
                Flag=False
                logger.critical('The snake touched itself')
        
    
    

    #Détection des extrémités 
    #Si le mode Gameover quand contact avec l'extrémité est activé
    if args.gameover_on_exit:
        if snakecor[-1][0]==screenwidth and vectdir==(1,0):
            Flag=False
            logger.error('You hit the end of the map')
            logger.debug('Game over')
        if snakecor[-1][0]==0 and vectdir==(-1,0):
            Flag=False
            logger.error('You hit the end of the map')
            logger.debug('Game over')
        if snakecor[-1][1]==screenheight and vectdir==(0,1):
            Flag=False
            logger.error('You hit the end of the map')
            logger.debug('Game over')
        if snakecor[-1][1]==0 and vectdir==(0,-1):
            Flag=False
            logger.error('You hit the end of the map')
            logger.debug('Game over')
        

    #Si le mode Gameover quand contact avec l'extrémité n'est pas activé
    else:
        if snakecor[-1][0]==screenwidth and vectdir==(1,0):
            snakecor[-1]=[0,snakecor[-1][1]]
        if snakecor[-1][0]==-taillerec and vectdir==(-1,0):
            snakecor[-1]=[screenwidth,snakecor[-1][1]]
        if snakecor[-1][1]==screenheight and vectdir==(0,1):
            snakecor[-1]=[snakecor[-1][0],0]
        if snakecor[-1][1]==-taillerec and vectdir==(0,-1):
            snakecor[-1]=[snakecor[-1][0],screenheight]

    #Fin du passage de la boucle où le serpent a mangé le fruitq
    testfruit=False

    #Mise à jour du quadrillage
    screen.fill( colors )
  
    for left in [k for k in range(0,screenwidth,2*taillerec)]: 
        for top in [k for k in range(0,screenheight,2*taillerec)]:
            rect = pg.Rect(left,top,taillerec, taillerec)
            pg.draw.rect(screen, black, rect)
    for left in [k for k in range(taillerec,screenwidth,2*taillerec)]:
        for top in [k for k in range(taillerec,screenheight,2*taillerec)]:
            rect = pg.Rect(left,top,taillerec, taillerec)
            pg.draw.rect(screen, black, rect)

    fruitrec = pg.Rect(fruit[0],fruit[1],taillerec, taillerec)
    pg.draw.rect(screen,red, fruitrec)

        
    for i in range(len(snakecor)):
        draw=pg.Rect(snakecor[i][0],snakecor[i][1],taillerec,taillerec)
        pg.draw.rect(screen,green,draw)
    pg.display.update()

quit()


